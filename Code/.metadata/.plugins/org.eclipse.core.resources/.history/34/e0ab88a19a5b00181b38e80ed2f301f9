/**
 * Source code from the Java Parallel Programming Coursera course.
 */
package week3;
import static edu.rice.pcdp.PCDP.async;
import static edu.rice.pcdp.PCDP.finish;
import static org.junit.Assert.assertEquals;

public class Exercicio {
	static int sum1, sum2;
	public static void main(String args[]) {
		double[] data = new double[1000];
		for (int i = 0; i < data.length; i++)
            data[i] = 2 * i;
		
		seqArraySum(data);
		asyncArraySum(data);
	}
	   
	public static double seqArraySum(double[] x){
		long startTime = System.nanoTime();
		sum1 = 0;
		sum2 = 0;
		for(int i = 0; i < x.length/2; i++)
			sum1 += x[i];
		
		for(int i = x.length/2 ; i < x.length; i++)
			sum2 += x[i];
		
		double sum = sum1 + sum2;
		long timeInNanos = System.nanoTime() - startTime;
		System.out.println("SEQ: " + timeInNanos + "nanosec; sum: " + sum);
		return sum;
	}
	
	public static double asyncArraySum(double[] x){
		long startTime = System.nanoTime();
		sum1 = 0;
		sum2 = 0;
		finish(()->{
			async(()->{
			for(int i = 0; i < x.length/2; i++)
				sum1 += x[i];
			});
		});
		for(int i = x.length/2 ; i < x.length; i++)
			sum2 += x[i];
		
		double sum = sum1 + sum2;
		long timeInNanos = System.nanoTime() - startTime;
		System.out.println("SEQ: " + timeInNanos + "nanosec; sum: " + sum);
		return sum;
	}
}
