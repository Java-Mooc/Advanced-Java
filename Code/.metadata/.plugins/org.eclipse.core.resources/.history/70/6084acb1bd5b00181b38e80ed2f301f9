/**
 * Source code from the Java Parallel Programming Coursera course.
 */
package week3;

import java.util.concurrent.ForkJoinPool;

public class Exercicio {
	static int sum1, sum2;
	public static void main(String args[]) {
		double[] array = createLargeArray();
		for(int i = 0; i < 5; i++) {
			long t1 = System.nanoTime();
			double res = somaSeq(array);
			t1 = System.nanoTime() - t1;
			print("Seq", res, t1);
			
			long t2 = System.nanoTime();
			res = somaAsync(array);
			t2 = System.nanoTime() - t2;
			print("Async", res, t1);
		}
	}
	   
	private static void print(String string, double res, long t1) {
		System.out.printf("%s in %8.3f miliseconds, sum = %8.5f \n", string, t1 / 1e6, res);
	}

	public static double somaSeq(double[] x){
		double sum = 0;
		for(int i = 0; i < x.length; i++)
			sum += 1 / x[i];
		return sum;
	}
	
	public static double somaAsync(double[] x){
		SumArray t = new SumArray(x, 0, x.length);
		ForkJoinPool.commonPool().invoke(t);
		return t.ans; 
	}
	
	
	public static double[] createLargeArray(){
		double[] data = new double[10000];
		for (int i = 0; i < data.length; i++)
			data[i] = 2 * i;
		return data;
	}
}
