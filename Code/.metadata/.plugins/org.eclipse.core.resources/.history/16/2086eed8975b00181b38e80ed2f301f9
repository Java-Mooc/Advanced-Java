/**
 * Source code from the Java Parallel Programming Coursera course.
 */
package week3;
import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class Exercicio {
	static int sum1, sum2;
	public static void main(String[] args) {
		ArrayList names = new ArrayList();
		
	      names.add("Mahesh");
	      names.add("Suresh");
	      names.add("Ramesh");
	      names.add("Naresh");
	      names.add("Kalpesh");
			
	      names.forEach(System.out::println);
	}
	public static double seqArraySum(double[] x){
		long startTime = System.nanoTime();
		sum1 = 0;
		sum2 = 0;
		for(int i = 0; i < x.length/2; i++)
			sum1 += x[i];
		
		for(int i = x.length/2 ; i < x.length; i++)
			sum2 += x[i];
		
		double sum = sum1 + sum2;
		long timeInNanos = System.nanoTime() - startTime;
		System.out.println("SEQ: " + timeInNanos + "nanosec; sum: " + sum);
		return sum;
	}
	
	public static double asyncArraySum(double[] x){
		long startTime = System.nanoTime();
		sum1 = 0;
		sum2 = 0;
		/*execute(()->{
		for(int i = 0; i < x.length/2; i++)
			sum1 += x[i];
		
		for(int i = x.length/2 ; i < x.length; i++)
			sum2 += x[i];
		
		double sum = sum1 + sum2;
		long timeInNanos = System.nanoTime() - startTime;
		System.out.println("SEQ: " + timeInNanos + "nanosec; sum: " + sum);
		return sum;
		)}*/
		return sum1;
	}
}
